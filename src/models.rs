// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use crate::schema::*;
use chrono::NaiveDate;
use chrono::NaiveTime;
use diesel::prelude::*;
use serde::Serialize;

#[derive(Queryable, Debug, Identifiable, Serialize)]
#[diesel(primary_key(circuitId), table_name = circuits)]
pub struct Circuit {
    pub circuitId: i32,
    pub circuitRef: String,
    pub name: String,
    pub location: Option<String>,
    pub country: Option<String>,
    pub lat: Option<f32>,
    pub lng: Option<f32>,
    pub alt: Option<i32>,
    pub url: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(constructorResultsId), table_name = constructorResults)]
pub struct ConstructorResult {
    pub constructorResultsId: i32,
    pub raceId: i32,
    pub constructorId: i32,
    pub points: Option<f32>,
    pub status: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(constructorStandingsId), table_name = constructorStandings)]
pub struct ConstructorStanding {
    pub constructorStandingsId: i32,
    pub raceId: i32,
    pub constructorId: i32,
    pub points: f32,
    pub position: Option<i32>,
    pub positionText: Option<String>,
    pub wins: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(constructorId), table_name = constructors)]
pub struct Constructor {
    pub constructorId: i32,
    pub constructorRef: String,
    pub name: String,
    pub nationality: Option<String>,
    pub url: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(driverStandingsId), table_name = driverStandings)]
pub struct DriverStanding {
    pub driverStandingsId: i32,
    pub raceId: i32,
    pub driverId: i32,
    pub points: f32,
    pub position: Option<i32>,
    pub positionText: Option<String>,
    pub wins: i32,
}

#[derive(Queryable, Debug, Identifiable, Serialize)]
#[diesel(primary_key(driverId), table_name = drivers)]
pub struct Driver {
    pub driverId: i32,
    pub driverRef: String,
    pub number: Option<i32>,
    pub code: Option<String>,
    pub forename: String,
    pub surname: String,
    pub dob: Option<NaiveDate>,
    pub nationality: Option<String>,
    pub url: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(raceId, driverId, lap), table_name = lapTimes)]
pub struct LapTime {
    pub raceId: i32,
    pub driverId: i32,
    pub lap: i32,
    pub position: Option<i32>,
    pub time: Option<String>,
    pub milliseconds: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(raceId, driverId, stop), table_name = pitStops)]
pub struct PitStop {
    pub raceId: i32,
    pub driverId: i32,
    pub stop: i32,
    pub lap: i32,
    pub time: NaiveTime,
    pub duration: Option<String>,
    pub milliseconds: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(qualifyId), table_name = qualifying)]
pub struct Qualifying {
    pub qualifyId: i32,
    pub raceId: i32,
    pub driverId: i32,
    pub constructorId: i32,
    pub number: i32,
    pub position: Option<i32>,
    pub q1: Option<String>,
    pub q2: Option<String>,
    pub q3: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(raceId), table_name = races)]
pub struct Race {
    pub raceId: i32,
    pub year: i32,
    pub round: i32,
    pub circuitId: i32,
    pub name: String,
    pub date: NaiveDate,
    pub time: Option<NaiveTime>,
    pub url: Option<String>,
    pub fp1_date: Option<NaiveDate>,
    pub fp1_time: Option<NaiveTime>,
    pub fp2_date: Option<NaiveDate>,
    pub fp2_time: Option<NaiveTime>,
    pub fp3_date: Option<NaiveDate>,
    pub fp3_time: Option<NaiveTime>,
    pub quali_date: Option<NaiveDate>,
    pub quali_time: Option<NaiveTime>,
    pub sprint_date: Option<NaiveDate>,
    pub sprint_time: Option<NaiveTime>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(resultId), table_name = results)]
pub struct Result {
    pub resultId: i32,
    pub raceId: i32,
    pub driverId: i32,
    pub constructorId: i32,
    pub number: Option<i32>,
    pub grid: i32,
    pub position: Option<i32>,
    pub positionText: String,
    pub positionOrder: i32,
    pub points: f32,
    pub laps: i32,
    pub time: Option<String>,
    pub milliseconds: Option<i32>,
    pub fastestLap: Option<i32>,
    pub rank: Option<i32>,
    pub fastestLapTime: Option<String>,
    pub fastestLapSpeed: Option<String>,
    pub statusId: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(year), table_name = seasons)]
pub struct Season {
    pub year: i32,
    pub url: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(sprintResultId), table_name = sprintResults)]
pub struct SprintResult {
    pub sprintResultId: i32,
    pub raceId: i32,
    pub driverId: i32,
    pub constructorId: i32,
    pub number: i32,
    pub grid: i32,
    pub position: Option<i32>,
    pub positionText: String,
    pub positionOrder: i32,
    pub points: f32,
    pub laps: i32,
    pub time: Option<String>,
    pub milliseconds: Option<i32>,
    pub fastestLap: Option<i32>,
    pub fastestLapTime: Option<String>,
    pub statusId: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(statusId), table_name = status)]
pub struct Status {
    pub statusId: i32,
    pub status: String,
}
